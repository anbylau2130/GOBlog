复制静态文件

最后还需要把js，css，image，tpl这些文件复制过来。

$ cd $GOPATH/src/hello
$ cp -R ../github.com/beego/admin/static ./
$ cp -R ../github.com/beego/admin/views ./


编译项目

全部做好了以后。就可以编译了,进入hello目录

$ go build
首次启动需要创建数据库、初始化数据库表。

$ ./hello -syncdb
好了，现在可以通过浏览器地址访问了http://localhost:8080/

默认得用户名密码都是admin


////////菜单生成约定//////////////
1，菜单分为水平和垂直菜单：目前支持的菜单为水平二级菜单+垂直1级菜单
  水平菜单：
      一级菜单需要设置parent=0         //@MenuH {"name":"系统管理","parent":"0"}
      二级菜单 parent=一级菜单的名称   //@MenuH {"name":"菜单管理","parent":"系统管理"}
  垂直菜单：
      三级菜单 parent=二级菜单名称     //@MenuV {"name":"菜单列表","parent":"菜单管理"}      
  权限控制：
                                     //@Privilege {"name":"操作","parent":"菜单编辑"}
      生成的权限为操作控制项
2，编码规则
  1，所有控制器需要UspController组合
  type *Controller struct {
    controllers.UspController
  }
  2，控制器必须以Controller结尾
      
    //@MenuH {"name":"系统管理","parent":"0"}
    //@MenuH {"name":"菜单管理","parent":"系统管理"}
    //@MenuV {"name":"菜单列表","parent":"菜单管理"}
    func (menus *MenusController) List() {
      menus.Layout = menus.GetTemplatetype() + "/shared/layout.tpl"
      menus.TplName = menus.GetTemplatetype() + "/adminPages/Menus.tpl"
    }

    //@MenuH {"name":"系统管理","parent":"0"}
    //@MenuH {"name":"菜单管理","parent":"系统管理"}
    //@MenuV {"name":"菜单明细","parent":"菜单管理"}
    func (menus *MenusController) Detail() {
      menus.Layout = menus.GetTemplatetype() + "/shared/layout.tpl"
      menus.TplName = menus.GetTemplatetype() + "/adminPages/MenuDetail.tpl"
    }

    //@MenuH {"name":"系统管理","parent":"0"}
    //@MenuH {"name":"菜单管理","parent":"系统管理"}
    //@MenuV {"name":"菜单编辑","parent":"菜单管理"}
    func (menus *MenusController) Edit() {
      menus.Layout = menus.GetTemplatetype() + "/shared/layout.tpl"
      menus.TplName = menus.GetTemplatetype() + "/adminPages/MenuDetail.tpl"
    }

    //@MenuH {"name":"系统管理","parent":"0"}
    //@MenuH {"name":"菜单管理","parent":"系统管理"}
    //@MenuV {"name":"菜单编辑","parent":"菜单管理"}
    //@Privilege {"name":"操作","parent":"菜单编辑"}
    func (menus *MenusController) CreateMenu() {
      controllers.RegisterMenus(&MenusController{})
    }



/////////////////////////数据库初始化///////////////////////////////////
1，数据库表初始
./blog -syncdb
2，菜单初始胡
./blog -syncmenu
3，数据初始运行sql语句
sqlinit.sql

