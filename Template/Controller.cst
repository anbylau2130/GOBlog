<%@ CodeTemplate Inherits="CodeTemplate"TargetLanguage="Text" Description="NetTiers main template."Debug="True" ResponseEncoding="UTF-8"%>

<%@ Assembly Name="SchemaExplorer" %>
<%@ Import Namespace="SchemaExplorer" %>
<%-- 要打印的表 --%>
<%@ Property Name="Table" Type="TableSchema" DeepLoad="True" Optional="False" Category="01. Getting Started - Required" Description="Database that the tables views, and stored procedures shouldbe based on. IMPORTANT!!! If SourceTables and SourceViews are left blank, theEntire Database will then be generated." %>
<%@ Property Name="Area" Type="String" DeepLoad="True" Optional="False" Category="01. Getting Started - Required" Description="Database that the tables views, and stored procedures shouldbe based on. IMPORTANT!!! If SourceTables and SourceViews are left blank, theEntire Database will then be generated." %>
<%@ Property Name="Controller" Type="String" DeepLoad="True" Optional="False" Category="01. Getting Started - Required" Description="Database that the tables views, and stored procedures shouldbe based on. IMPORTANT!!! If SourceTables and SourceViews are left blank, theEntire Database will then be generated." %>

package <%=Area.ToLower()%>

import (
	"blog/controllers"
	"blog/lib"
	"blog/models"

	_ "github.com/go-sql-driver/mysql"
)

// MenusController  controller
type <%=Controller%>Controller struct {
	controllers.UspController
}

//@MenuH {"name":"系统管理","parent":"0"}
//@MenuH {"name":"菜单管理","parent":"系统管理"}
//@MenuV {"name":"菜单列表","parent":"菜单管理"}
func (this *<%=Controller%>Controller) List() {
	this.Layout = this.GetTemplatetype() + "/shared/layout.tpl"
	this.TplName = this.GetTemplatetype() + "/<%=Area.ToLower()%>Pages/<%=Controller.ToLower()%>.tpl"
}

func (this *<%=Controller%>Controller) GetList() {
	pageindex, _ := this.GetInt64("start")
	pagesize, _ := this.GetInt64("length")
	draw, _ := this.GetInt64("draw")
	model := new(models.<%=Table.Name%>)
	models, _ := model.Getlist(nil, pageindex, pagesize, "ID")
	count, _ := model.Count(nil)
	this.Data["json"] = &map[string]interface{}{"draw": draw, "recordsTotal": count, "recordsFiltered": count, "data": models}
	this.ServeJSON()
}

func (this *<%=Controller%>Controller) GetModel() {
	model := models.<%=Table.Name%>{}
	id, error := this.GetInt64("id")
	if id != 0 && error == nil {
		model.ID = id
		model.Read("ID")
		this.Data["json"] = &map[string]interface{}{"success": true, "data": model}
		this.ServeJSON()
		return
	}
	this.Rsp(false, error.Error())
}

//@MenuH {"name":"系统管理","parent":"0"}
//@MenuH {"name":"菜单管理","parent":"系统管理"}
//@MenuV {"name":"菜单明细","parent":"菜单管理"}
func (this *<%=Controller%>Controller) Add() {
	if this.IsAjax() {
		model := new(models.<%=Table.Name%>)
		if error := this.ParseForm(model); error != nil {
			this.Rsp(false, error.Error())
			return
		}
		count, error := model.Add()
		if error == nil && count > 0 {
			this.Rsp(true, "Success")
		} else {
			this.Rsp(false, "")
		}
		return
	}
	this.Layout = this.GetTemplatetype() + "/shared/layout.tpl"
	this.TplName = this.GetTemplatetype() + "/<%=Area.ToLower()%>Pages/add<%=Controller.ToLower()%>.tpl"
}

func (this *<%=Controller%>Controller) Del() {
	model := new(models.<%=Table.Name%>)
	if this.IsAjax() {
		id, error := this.GetInt64("id")
		if id != 0 && error == nil {
			model.ID = id
			count, error := model.Delete()
			if error != nil || count == 0 {
				this.Rsp(false, error.Error())
			}
		}
	}
	this.Rsp(true, "数据删除成功!")
}

//@MenuH {"name":"系统管理","parent":"0"}
//@MenuH {"name":"菜单管理","parent":"系统管理"}
//@MenuV {"name":"菜单编辑","parent":"菜单管理"}
func (this *<%=Controller%>Controller) Edit() {
	model := new(models.<%=Table.Name%>)
	//ajax提交
	if this.IsAjax() {
		if error := this.ParseForm(model); error != nil {
			this.Rsp(false, error.Error())
			return
		}
		count, error := model.Update()
		if error == nil && count > 0 {
			this.Rsp(true, "数据编辑成功!")
		} else {
			this.Rsp(false, error.Error())
		}
		return
	}
	//页面访问
	id, error := this.GetInt64("id")
	if id != 0 && error == nil {
		model.ID = id
		model.Read("ID")
	}
	this.Data["Model"] = model
	this.Layout = this.GetTemplatetype() + "/shared/layout.tpl"
	this.TplName = this.GetTemplatetype() + "/<%=Area.ToLower()%>Pages/edit<%=Controller.ToLower()%>.tpl"

}


<script runat="template">

 public string modifyTableName(string oldstr,string newstr)
 {
     var result=string.Empty;
     var temp=oldstr.Replace(newstr,"");
     for(int i=0;i<temp.Length;i++)
     {
            if(i==0)
            {
                result+=temp[i].ToString().ToUpper();
            }
            else
            {
                result+=temp[i].ToString();
            }
     }
     
     return result;
 }
 
 public string modifyColumnName(string str)
 {
     var result=string.Empty;
     for(int i=0;i<str.Length;i++)
     {
            if(i==0)
            {
                result+=str[i].ToString().ToUpper();
            }
            else
            {
                result+=str[i].ToString();
            }
     }
     
     return result;
 }
 
 public string createOrmInfo(ColumnSchema column)
 {
    
     string result= "`orm:\"column("+column.Name+");";
     
    if(column.IsPrimaryKeyMember)
    {
        result+="pk;";
    }
    
    if(column.AllowDBNull)
    {
        result+="not null;";
    }
    if(column.IsUnique)
    {
        result+="unique;";
    }
    
    if(column.NativeType.Contains("varchar"))
    {
        
        result+="size("+column.Size+");";
    }
    
    var typeResult= DataType2GolangType(column.DataType);
    if(typeResult.Contains("float32")||typeResult.Contains("float64"))
    {
        result+="digits(28);decimals(8);";
    }
    
    if(typeResult.Contains("time.Time"))
    {
        //auto_now_add 第一次保存时才设置时间
        //auto_now 每次 model 保存时都会对时间自动更新
        result+="auto_now_add;type(datetime);";
    }
//    if(column.ExtendedProperties["CS_Default"] != null)
//    {
//        result+= "default("+column.ExtendedProperties["CS_Default"].Value+");";
//    }
    
    if(column.Name.ToLower()=="id")
    {
        result+="index;auto;";
    }
    
    
//    if(column.IsForeignKeyMember)
//    {
//     if(Table.Columns[i].IsForeignKeyMember)*
//        result+="rel(fk);";
//    }
    return result+"\"`";
   
 }
//将数据库类型转化为Golang类型

public string DataType2GolangType(System.Data.DbType dbType)
{
    switch (dbType)
    {
        case DbType.AnsiString:
            return "string";
        case DbType.AnsiStringFixedLength:
            return "string";
        case DbType.Binary:
            return "byte[]";
        case DbType.Boolean:
            return "bool";
        case DbType.Byte:
            return "byte";
        case DbType.Currency:

            return "float64";

        case DbType.Date:
            return "time.Time";
        case DbType.DateTime:
            return "time.Time";
        case DbType.DateTime2:
            return "time.Time";
        case DbType.DateTimeOffset:
            return "time.Time";
        case DbType.Time:
            return "time.Time";
            
        case DbType.Decimal:
            return "float64";
        case DbType.Double:
            return "float64";

        case DbType.Int16:
            return "int16";
        case DbType.Int32:
            return "int32";
        case DbType.Int64:
            return "int64";

        case DbType.SByte:
            return "byte";

        case DbType.Single:
            return "float32";
        case DbType.String:
            return "string";
        case DbType.StringFixedLength:
            return "string";

        case DbType.UInt16:
            return "uint16";
        case DbType.UInt32:
            return "uint32";
        case DbType.UInt64:
            return "uint64";
        case DbType.VarNumeric:
            return "float64";
        case DbType.Xml:
            return "string";
        default:
            return "object";

    }

}

</script>