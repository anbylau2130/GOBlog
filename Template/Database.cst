<%-- 
Name:
Author: 
Description: 
--%>
<%@ Template Language="C#" TargetLanguage="Text" %>
<%@ Assembly Name="SchemaExplorer"%>
<%@ Import Namespace="SchemaExplorer"%>

<%-- 数据库 --%>
<%@ Property Name="SourceDatabase" Type="DatabaseSchema" DeepLoad="True"  Optional="False"  Category="01. GettingStarted - Required"  Description="Database that the tables views, and storedprocedures should be based on. IMPORTANT!!! If SourceTables and SourceViews areleft blank, the Entire Database will then be generated." %>
<%@ Register Name="ModelTemplate" Template="Model.cst" MergeProperties="Flase" ExcludeProperties="" %>
<%@ Register Name="ListViewTemplate" Template="ListView.cst" MergeProperties="Flase" ExcludeProperties="" %>
<script runat="template">
//解决方案输出路径
private string Directory = String.Empty;

[Editor(typeof(System.Windows.Forms.Design.FolderNameEditor), typeof(System.Drawing.Design.UITypeEditor))] 
[Optional, NotChecked]
[DefaultValue("")]
public string OutputDirectory 
{ 
    get
    {
        return Directory;
    }
    set
    {
        if (value.EndsWith("\\")) value = value.Substring(0, value.Length -1);
        Directory = value;
    } 
}
</script>
<script runat="template">
//生成实体Entity类
private void GenerateEntityClasses()
{
    CodeTemplate Template =new ModelTemplate();
    foreach(TableSchema table in this.SourceDatabase.Tables)
    {
        string FileDirectory = OutputDirectory +"\\"+ modifyTableName(table.Name,"t_sys_") +".go";
        //生成模板
        Template.SetProperty("Table",table);
        //文件输出
        Template.RenderToFile(FileDirectory,true);
        Debug.WriteLine(FileDirectory +" 创建成功.");
    }
}
//生成List.tpl
private void GenerateListView()
{
    CodeTemplate Template =new ListViewTemplate();
    foreach(TableSchema table in this.SourceDatabase.Tables)
    {
        string FileDirectory = OutputDirectory +"\\"+ table.Name+".tpl";
        //生成模板
        Template.SetProperty("Table",table);
        //文件输出
        Template.RenderToFile(FileDirectory,true);
        Debug.WriteLine(FileDirectory +" 创建成功.");
    }
}
 public string modifyTableName(string oldstr,string newstr)
 {
     var result=string.Empty;
     var temp=oldstr.Replace(newstr,"");
     for(int i=0;i<temp.Length;i++)
     {
            if(i==0)
            {
                result+=temp[i].ToString().ToUpper();
            }
            else
            {
                result+=temp[i].ToString();
            }
     }
     
     return result;
 }
 
</script>



<%
    //创建实体层Entity类
    this.GenerateEntityClasses();

    Debug.WriteLine("OK");

%>